{
  "version": 3,
  "sources": ["../../codemirror/mode/groovy/groovy.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"groovy\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\n    \"try void volatile while\");\n  var blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\n  var standaloneKeywords = words(\"return break continue\");\n  var atoms = words(\"null true false this\");\n\n  var curPunc;\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return startString(ch, stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (expectExpression(state.lastToken, false)) {\n        return startString(ch, stream, state);\n      }\n    }\n    if (ch == \"-\" && stream.eat(\">\")) {\n      curPunc = \"->\";\n      return null;\n    }\n    if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n      stream.eatWhile(/[+\\-*&%=<>|~]/);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n    if (state.lastToken == \".\") return \"property\";\n    if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n    var cur = stream.current();\n    if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n      return \"keyword\";\n    }\n    return \"variable\";\n  }\n  tokenBase.isBase = true;\n\n  function startString(quote, stream, state) {\n    var tripleQuoted = false;\n    if (quote != \"/\" && stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\";\n    }\n    function t(stream, state) {\n      var escaped = false, next, end = !tripleQuoted;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          if (!tripleQuoted) { break; }\n          if (stream.match(quote + quote)) { end = true; break; }\n        }\n        if (quote == '\"' && next == \"$\" && !escaped) {\n          if (stream.eat(\"{\")) {\n            state.tokenize.push(tokenBaseUntilBrace());\n            return \"string\";\n          } else if (stream.match(/^\\w/, false)) {\n            state.tokenize.push(tokenVariableDeref);\n            return \"string\";\n          }\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize.pop();\n      return \"string\";\n    }\n    state.tokenize.push(t);\n    return t(stream, state);\n  }\n\n  function tokenBaseUntilBrace() {\n    var depth = 1;\n    function t(stream, state) {\n      if (stream.peek() == \"}\") {\n        depth--;\n        if (depth == 0) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        }\n      } else if (stream.peek() == \"{\") {\n        depth++;\n      }\n      return tokenBase(stream, state);\n    }\n    t.isBase = true;\n    return t;\n  }\n\n  function tokenVariableDeref(stream, state) {\n    var next = stream.match(/^(\\.|[\\w\\$_]+)/)\n    if (!next) {\n      state.tokenize.pop()\n      return state.tokenize[state.tokenize.length-1](stream, state)\n    }\n    return next[0] == \".\" ? null : \"variable\"\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize.pop();\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function expectExpression(last, newline) {\n    return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n      last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n      (last == \"standalone\" && !newline);\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: [tokenBase],\n        context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true,\n        lastToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        // Automatic semicolon insertion\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n          popContext(state); ctx = state.context;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = state.tokenize[state.tokenize.length-1](stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      // Handle indentation for {x -> \\n ... }\n      else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n        popContext(state);\n        state.context.align = false;\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      state.lastToken = curPunc || style;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (!state.tokenize[state.tokenize.length-1].isBase) return CodeMirror.Pass;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : config.indentUnit);\n    },\n\n    electricChars: \"{}\",\n    closeBrackets: {triples: \"'\\\"\"},\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-groovy\", \"groovy\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "words", "stream", "state"]
}
