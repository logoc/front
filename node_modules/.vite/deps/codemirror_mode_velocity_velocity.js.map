{
  "version": 3,
  "sources": ["../../codemirror/mode/velocity/velocity.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Separator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eat(\"!\");\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
