{
  "version": 3,
  "sources": ["../../codemirror/mode/erlang/erlang.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*jshint unused:true, eqnull:true, curly:true, bitwise:true */\n/*jshint undef:true, latedef:true, trailing:true */\n/*global CodeMirror:true */\n\n// erlang mode.\n// tokenizer -> token types -> CodeMirror styles\n// tokenizer maintains a parse stack\n// indenter uses the parse stack\n\n// TODO indenter:\n//   bit syntax\n//   old guard/bif/conversion clashes (e.g. \"float/1\")\n//   type/spec/opaque\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMIME(\"text/x-erlang\", \"erlang\");\n\nCodeMirror.defineMode(\"erlang\", function(cmCfg) {\n  \"use strict\";\n\n/////////////////////////////////////////////////////////////////////////////\n// constants\n\n  var typeWords = [\n    \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\n  var keywordWords = [\n    \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n    \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\n  var separatorRE    = /[\\->,;]/;\n  var separatorWords = [\n    \"->\",\";\",\",\"];\n\n  var operatorAtomWords = [\n    \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n    \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\n  var operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\n  var operatorSymbolWords = [\n    \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\n  var openParenRE    = /[<\\(\\[\\{]/;\n  var openParenWords = [\n    \"<<\",\"(\",\"[\",\"{\"];\n\n  var closeParenRE    = /[>\\)\\]\\}]/;\n  var closeParenWords = [\n    \"}\",\"]\",\")\",\">>\"];\n\n  var guardWords = [\n    \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n    \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n    \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n    \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n    \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\n  var bifWords = [\n    \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n    \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n    \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n    \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n    \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n    \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n    \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n    \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n    \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n    \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n    \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n    \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n    \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n    \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n    \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n    \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n    \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n    \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n    \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n    \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n    \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n    \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [\u00D8-\u00DE] [\u00C0-\u00D6]\n// lower case: [a-z] [\u00DF-\u00F6] [\u00F8-\u00FF]\n  var anumRE       = /[\\w@\u00D8-\u00DE\u00C0-\u00D6\u00DF-\u00F6\u00F8-\u00FF]/;\n  var escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\n  function tokenizer(stream,state) {\n    // in multi-line string\n    if (state.in_string) {\n      state.in_string = (!doubleQuote(stream));\n      return rval(state,stream,\"string\");\n    }\n\n    // in multi-line atom\n    if (state.in_atom) {\n      state.in_atom = (!singleQuote(stream));\n      return rval(state,stream,\"atom\");\n    }\n\n    // whitespace\n    if (stream.eatSpace()) {\n      return rval(state,stream,\"whitespace\");\n    }\n\n    // attributes and type specs\n    if (!peekToken(state) &&\n        stream.match(/-\\s*[a-z\u00DF-\u00F6\u00F8-\u00FF][\\w\u00D8-\u00DE\u00C0-\u00D6\u00DF-\u00F6\u00F8-\u00FF]*/)) {\n      if (is_member(stream.current(),typeWords)) {\n        return rval(state,stream,\"type\");\n      }else{\n        return rval(state,stream,\"attribute\");\n      }\n    }\n\n    var ch = stream.next();\n\n    // comment\n    if (ch == '%') {\n      stream.skipToEnd();\n      return rval(state,stream,\"comment\");\n    }\n\n    // colon\n    if (ch == \":\") {\n      return rval(state,stream,\"colon\");\n    }\n\n    // macro\n    if (ch == '?') {\n      stream.eatSpace();\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"macro\");\n    }\n\n    // record\n    if (ch == \"#\") {\n      stream.eatSpace();\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"record\");\n    }\n\n    // dollar escape\n    if (ch == \"$\") {\n      if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n        return rval(state,stream,\"error\");\n      }\n      return rval(state,stream,\"number\");\n    }\n\n    // dot\n    if (ch == \".\") {\n      return rval(state,stream,\"dot\");\n    }\n\n    // quoted atom\n    if (ch == '\\'') {\n      if (!(state.in_atom = (!singleQuote(stream)))) {\n        if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n          stream.match(/\\s*\\/\\s*[0-9]/,true);\n          return rval(state,stream,\"fun\");      // 'f'/0 style fun\n        }\n        if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n          return rval(state,stream,\"function\");\n        }\n      }\n      return rval(state,stream,\"atom\");\n    }\n\n    // string\n    if (ch == '\"') {\n      state.in_string = (!doubleQuote(stream));\n      return rval(state,stream,\"string\");\n    }\n\n    // variable\n    if (/[A-Z_\u00D8-\u00DE\u00C0-\u00D6]/.test(ch)) {\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"variable\");\n    }\n\n    // atom/keyword/BIF/function\n    if (/[a-z_\u00DF-\u00F6\u00F8-\u00FF]/.test(ch)) {\n      stream.eatWhile(anumRE);\n\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // f/0 style fun\n      }\n\n      var w = stream.current();\n\n      if (is_member(w,keywordWords)) {\n        return rval(state,stream,\"keyword\");\n      }else if (is_member(w,operatorAtomWords)) {\n        return rval(state,stream,\"operator\");\n      }else if (stream.match(/\\s*\\(/,false)) {\n        // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n        if (is_member(w,bifWords) &&\n            ((peekToken(state).token != \":\") ||\n             (peekToken(state,2).token == \"erlang\"))) {\n          return rval(state,stream,\"builtin\");\n        }else if (is_member(w,guardWords)) {\n          return rval(state,stream,\"guard\");\n        }else{\n          return rval(state,stream,\"function\");\n        }\n      }else if (lookahead(stream) == \":\") {\n        if (w == \"erlang\") {\n          return rval(state,stream,\"builtin\");\n        } else {\n          return rval(state,stream,\"function\");\n        }\n      }else if (is_member(w,[\"true\",\"false\"])) {\n        return rval(state,stream,\"boolean\");\n      }else{\n        return rval(state,stream,\"atom\");\n      }\n    }\n\n    // number\n    var digitRE      = /[0-9]/;\n    var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n    if (digitRE.test(ch)) {\n      stream.eatWhile(digitRE);\n      if (stream.eat('#')) {                // 36#aZ  style integer\n        if (!stream.eatWhile(radixRE)) {\n          stream.backUp(1);                 //\"36#\" - syntax error\n        }\n      } else if (stream.eat('.')) {       // float\n        if (!stream.eatWhile(digitRE)) {\n          stream.backUp(1);        // \"3.\" - probably end of function\n        } else {\n          if (stream.eat(/[eE]/)) {        // float with exponent\n            if (stream.eat(/[-+]/)) {\n              if (!stream.eatWhile(digitRE)) {\n                stream.backUp(2);            // \"2e-\" - syntax error\n              }\n            } else {\n              if (!stream.eatWhile(digitRE)) {\n                stream.backUp(1);            // \"2e\" - syntax error\n              }\n            }\n          }\n        }\n      }\n      return rval(state,stream,\"number\");   // normal integer\n    }\n\n    // open parens\n    if (nongreedy(stream,openParenRE,openParenWords)) {\n      return rval(state,stream,\"open_paren\");\n    }\n\n    // close parens\n    if (nongreedy(stream,closeParenRE,closeParenWords)) {\n      return rval(state,stream,\"close_paren\");\n    }\n\n    // separators\n    if (greedy(stream,separatorRE,separatorWords)) {\n      return rval(state,stream,\"separator\");\n    }\n\n    // operators\n    if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n      return rval(state,stream,\"operator\");\n    }\n\n    return rval(state,stream,null);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\n  function nongreedy(stream,re,words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n      stream.backUp(1);\n      while (re.test(stream.peek())) {\n        stream.next();\n        if (is_member(stream.current(),words)) {\n          return true;\n        }\n      }\n      stream.backUp(stream.current().length-1);\n    }\n    return false;\n  }\n\n  function greedy(stream,re,words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n      while (re.test(stream.peek())) {\n        stream.next();\n      }\n      while (0 < stream.current().length) {\n        if (is_member(stream.current(),words)) {\n          return true;\n        }else{\n          stream.backUp(1);\n        }\n      }\n      stream.next();\n    }\n    return false;\n  }\n\n  function doubleQuote(stream) {\n    return quote(stream, '\"', '\\\\');\n  }\n\n  function singleQuote(stream) {\n    return quote(stream,'\\'','\\\\');\n  }\n\n  function quote(stream,quoteChar,escapeChar) {\n    while (!stream.eol()) {\n      var ch = stream.next();\n      if (ch == quoteChar) {\n        return true;\n      }else if (ch == escapeChar) {\n        stream.next();\n      }\n    }\n    return false;\n  }\n\n  function lookahead(stream) {\n    var m = stream.match(/^\\s*([^\\s%])/, false)\n    return m ? m[1] : \"\";\n  }\n\n  function is_member(element,list) {\n    return (-1 < list.indexOf(element));\n  }\n\n  function rval(state,stream,type) {\n\n    // parse stack\n    pushToken(state,realToken(type,stream));\n\n    // map erlang token type to CodeMirror style class\n    //     erlang             -> CodeMirror tag\n    switch (type) {\n      case \"atom\":        return \"atom\";\n      case \"attribute\":   return \"attribute\";\n      case \"boolean\":     return \"atom\";\n      case \"builtin\":     return \"builtin\";\n      case \"close_paren\": return null;\n      case \"colon\":       return null;\n      case \"comment\":     return \"comment\";\n      case \"dot\":         return null;\n      case \"error\":       return \"error\";\n      case \"fun\":         return \"meta\";\n      case \"function\":    return \"tag\";\n      case \"guard\":       return \"property\";\n      case \"keyword\":     return \"keyword\";\n      case \"macro\":       return \"variable-2\";\n      case \"number\":      return \"number\";\n      case \"open_paren\":  return null;\n      case \"operator\":    return \"operator\";\n      case \"record\":      return \"bracket\";\n      case \"separator\":   return null;\n      case \"string\":      return \"string\";\n      case \"type\":        return \"def\";\n      case \"variable\":    return \"variable\";\n      default:            return null;\n    }\n  }\n\n  function aToken(tok,col,ind,typ) {\n    return {token:  tok,\n            column: col,\n            indent: ind,\n            type:   typ};\n  }\n\n  function realToken(type,stream) {\n    return aToken(stream.current(),\n                 stream.column(),\n                 stream.indentation(),\n                 type);\n  }\n\n  function fakeToken(type) {\n    return aToken(type,0,0,type);\n  }\n\n  function peekToken(state,depth) {\n    var len = state.tokenStack.length;\n    var dep = (depth ? depth : 1);\n\n    if (len < dep) {\n      return false;\n    }else{\n      return state.tokenStack[len-dep];\n    }\n  }\n\n  function pushToken(state,token) {\n\n    if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n      state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n      state.tokenStack = maybe_drop_post(state.tokenStack);\n    }\n  }\n\n  function maybe_drop_pre(s,token) {\n    var last = s.length-1;\n\n    if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n      s.pop();\n    }else if (0 < last && s[last].type === \"group\") {\n      s.pop();\n      s.push(token);\n    }else{\n      s.push(token);\n    }\n    return s;\n  }\n\n  function maybe_drop_post(s) {\n    if (!s.length) return s\n    var last = s.length-1;\n\n    if (s[last].type === \"dot\") {\n      return [];\n    }\n    if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n      return s.slice(0,last-1);\n    }\n    switch (s[last].token) {\n      case \"}\":    return d(s,{g:[\"{\"]});\n      case \"]\":    return d(s,{i:[\"[\"]});\n      case \")\":    return d(s,{i:[\"(\"]});\n      case \">>\":   return d(s,{i:[\"<<\"]});\n      case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n      case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                                  \",\",\"(\",\"[\",\"{\",\"<<\"]});\n      case \"->\":   return d(s,{r:[\"when\"],\n                               m:[\"try\",\"if\",\"case\",\"receive\"]});\n      case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n      case \"catch\":return d(s,{e:[\"try\"]});\n      case \"of\":   return d(s,{e:[\"case\"]});\n      case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n      default:     return s;\n    }\n  }\n\n  function d(stack,tt) {\n    // stack is a stack of Token objects.\n    // tt is an object; {type:tokens}\n    // type is a char, tokens is a list of token strings.\n    // The function returns (possibly truncated) stack.\n    // It will descend the stack, looking for a Token such that Token.token\n    //  is a member of tokens. If it does not find that, it will normally (but\n    //  see \"E\" below) return stack. If it does find a match, it will remove\n    //  all the Tokens between the top and the matched Token.\n    // If type is \"m\", that is all it does.\n    // If type is \"i\", it will also remove the matched Token and the top Token.\n    // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n    // If type is \"r\", it will remove the matched Token, but not the top Token.\n    // If type is \"e\", it will keep the matched Token but not the top Token.\n    // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n    //  in which case it will return an empty stack.\n\n    for (var type in tt) {\n      var len = stack.length-1;\n      var tokens = tt[type];\n      for (var i = len-1; -1 < i ; i--) {\n        if (is_member(stack[i].token,tokens)) {\n          var ss = stack.slice(0,i);\n          switch (type) {\n              case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n              case \"r\": return ss.concat(stack[len]);\n              case \"i\": return ss;\n              case \"g\": return ss.concat(fakeToken(\"group\"));\n              case \"E\": return ss.concat(stack[i]);\n              case \"e\": return ss.concat(stack[i]);\n          }\n        }\n      }\n    }\n    return (type == \"E\" ? [] : stack);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\n  function indenter(state,textAfter) {\n    var t;\n    var unit = cmCfg.indentUnit;\n    var wordAfter = wordafter(textAfter);\n    var currT = peekToken(state,1);\n    var prevT = peekToken(state,2);\n\n    if (state.in_string || state.in_atom) {\n      return CodeMirror.Pass;\n    }else if (!prevT) {\n      return 0;\n    }else if (currT.token == \"when\") {\n      return currT.column+unit;\n    }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n      return prevT.indent+unit;\n    }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n      return  currT.column+3;\n    }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n      return t.column;\n    }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n      t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n      return t ? t.column : CodeMirror.Pass;\n    }else if (is_member(wordAfter,closeParenWords)) {\n      t = getToken(state,openParenWords);\n      return t ? t.column : CodeMirror.Pass;\n    }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n              is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n      t = postcommaToken(state);\n      return t ? t.column+t.token.length : unit;\n    }else if (currT.token == \"->\") {\n      if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n        return prevT.column+unit+unit;\n      }else{\n        return prevT.column+unit;\n      }\n    }else if (is_member(currT.token,openParenWords)) {\n      return currT.column+currT.token.length;\n    }else{\n      t = defaultToken(state);\n      return truthy(t) ? t.column+unit : 0;\n    }\n  }\n\n  function wordafter(str) {\n    var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n    return truthy(m) && (m.index === 0) ? m[0] : \"\";\n  }\n\n  function postcommaToken(state) {\n    var objs = state.tokenStack.slice(0,-1);\n    var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n    return truthy(objs[i]) ? objs[i] : false;\n  }\n\n  function defaultToken(state) {\n    var objs = state.tokenStack;\n    var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n    var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n    if (truthy(stop) && truthy(oper) && stop < oper) {\n      return objs[stop+1];\n    } else if (truthy(stop)) {\n      return objs[stop];\n    } else {\n      return false;\n    }\n  }\n\n  function getToken(state,tokens) {\n    var objs = state.tokenStack;\n    var i = getTokenIndex(objs,\"token\",tokens);\n\n    return truthy(objs[i]) ? objs[i] : false;\n  }\n\n  function getTokenIndex(objs,propname,propvals) {\n\n    for (var i = objs.length-1; -1 < i ; i--) {\n      if (is_member(objs[i][propname],propvals)) {\n        return i;\n      }\n    }\n    return false;\n  }\n\n  function truthy(x) {\n    return (x !== false) && (x != null);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\n  return {\n    startState:\n      function() {\n        return {tokenStack: [],\n                in_string:  false,\n                in_atom:    false};\n      },\n\n    token:\n      function(stream, state) {\n        return tokenizer(stream, state);\n      },\n\n    indent:\n      function(state, textAfter) {\n        return indenter(state,textAfter);\n      },\n\n    lineComment: \"%\"\n  };\n});\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
