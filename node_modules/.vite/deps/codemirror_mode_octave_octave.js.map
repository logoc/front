{
  "version": 3,
  "sources": ["../../codemirror/mode/octave/octave.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"octave\", function() {\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n  var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n  var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n  var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n  var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n  var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  var builtins = wordRegexp([\n    'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n    'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n    'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n    'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n    'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n    'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n    'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n  ]);\n\n  var keywords = wordRegexp([\n    'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n    'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n    'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n    'continue', 'pkg'\n  ]);\n\n\n  // tokenizers\n  function tokenTranspose(stream, state) {\n    if (!stream.sol() && stream.peek() === '\\'') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return 'operator';\n    }\n    state.tokenize = tokenBase;\n    return tokenBase(stream, state);\n  }\n\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^.*%}/)) {\n      state.tokenize = tokenBase;\n      return 'comment';\n    };\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  function tokenBase(stream, state) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match('%{')){\n      state.tokenize = tokenComment;\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (stream.match(/^[%#]/)){\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n        stream.tokenize = tokenBase;\n        return 'number'; };\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    }\n    if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n    // Handle Strings\n    var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n    if (m) { return m[1] ? 'string' : \"string error\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return 'keyword'; } ;\n    if (stream.match(builtins)) { return 'builtin'; } ;\n    if (stream.match(identifiers)) { return 'variable'; } ;\n\n    if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n    if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n    if (stream.match(expressionEnd)) {\n      state.tokenize = tokenTranspose;\n      return null;\n    };\n\n\n    // Handle non-detected items\n    stream.next();\n    return 'error';\n  };\n\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      if (style === 'number' || style === 'variable'){\n        state.tokenize = tokenTranspose;\n      }\n      return style;\n    },\n\n    lineComment: '%',\n\n    fold: 'indent'\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
