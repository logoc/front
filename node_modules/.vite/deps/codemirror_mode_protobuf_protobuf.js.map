{
  "version": 3,
  "sources": ["../../codemirror/mode/protobuf/protobuf.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  };\n\n  var keywordArray = [\n    \"package\", \"message\", \"import\", \"syntax\",\n    \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n    \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n    \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n    \"option\", \"service\", \"rpc\", \"returns\"\n  ];\n  var keywords = wordRegexp(keywordArray);\n\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n    }\n\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n    if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return \"keyword\"; }\n    if (stream.match(identifiers)) { return \"variable\"; } ;\n\n    // Handle non-detected items\n    stream.next();\n    return null;\n  };\n\n  CodeMirror.defineMode(\"protobuf\", function() {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACtB;AAEA,eAAS,WAAW,OAAO;AACzB,eAAO,IAAI,OAAO,QAAQ,MAAM,KAAK,KAAK,IAAI,SAAS,GAAG;AAAA,MAC5D;AAAC;AAED,UAAI,eAAe;AAAA,QACjB;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAChC;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAW;AAAA,QAAc;AAAA,QACzE;AAAA,QAAQ;AAAA,QAAS;AAAA,QAAU;AAAA,QAAQ;AAAA,QAAS;AAAA,QAC5C;AAAA,QAAS;AAAA,QAAS;AAAA,QAAU;AAAA,QAAU;AAAA,QAAU;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAY;AAAA,QAC5F;AAAA,QAAU;AAAA,QAAW;AAAA,QAAO;AAAA,MAC9B;AACA,UAAI,WAAW,WAAW,YAAY;AAEtC,MAAAA,YAAW,eAAe,aAAa,YAAY,YAAY;AAE/D,UAAI,cAAc,IAAI,OAAO,+CAA+C;AAE5E,eAAS,UAAU,QAAQ;AAEzB,YAAI,OAAO,SAAS;AAAG,iBAAO;AAG9B,YAAI,OAAO,MAAM,IAAI,GAAG;AACtB,iBAAO,UAAU;AACjB,iBAAO;AAAA,QACT;AAGA,YAAI,OAAO,MAAM,cAAc,KAAK,GAAG;AACrC,cAAI,OAAO,MAAM,sBAAsB;AACrC,mBAAO;AACT,cAAI,OAAO,MAAM,iCAAiC;AAChD,mBAAO;AACT,cAAI,OAAO,MAAM,4BAA4B;AAC3C,mBAAO;AAAA,QACX;AAGA,YAAI,OAAO,MAAM,iBAAiB,GAAG;AAAE,iBAAO;AAAA,QAAU;AACxD,YAAI,OAAO,MAAM,iBAAiB,GAAG;AAAE,iBAAO;AAAA,QAAU;AAGxD,YAAI,OAAO,MAAM,QAAQ,GAAG;AAAE,iBAAO;AAAA,QAAW;AAChD,YAAI,OAAO,MAAM,WAAW,GAAG;AAAE,iBAAO;AAAA,QAAY;AAAE;AAGtD,eAAO,KAAK;AACZ,eAAO;AAAA,MACT;AAAC;AAED,MAAAA,YAAW,WAAW,YAAY,WAAW;AAC3C,eAAO;AAAA,UACL,OAAO;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,mBAAmB,UAAU;AAAA,IACrD,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
