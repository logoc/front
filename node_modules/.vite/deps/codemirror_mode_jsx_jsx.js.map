{
  "version": 3,
  "sources": ["../../codemirror/mode/jsx/jsx.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\", \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")),\n                                    xmlMode, 0, state.context)\n        jsMode.skipExpression(cx.state)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {name: \"jsx\", base: {name: \"javascript\", typescript: true}})\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
