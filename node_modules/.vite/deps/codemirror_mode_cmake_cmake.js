import {
  require_codemirror
} from "./chunk-4YIHMBEX.js";
import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/codemirror/mode/cmake/cmake.js
var require_cmake = __commonJS({
  "node_modules/codemirror/mode/cmake/cmake.js"(exports, module) {
    (function(mod) {
      if (typeof exports == "object" && typeof module == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("cmake", function() {
        var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;
        function tokenString(stream, state) {
          var current, prev, found_var = false;
          while (!stream.eol() && (current = stream.next()) != state.pending) {
            if (current === "$" && prev != "\\" && state.pending == '"') {
              found_var = true;
              break;
            }
            prev = current;
          }
          if (found_var) {
            stream.backUp(1);
          }
          if (current == state.pending) {
            state.continueString = false;
          } else {
            state.continueString = true;
          }
          return "string";
        }
        function tokenize(stream, state) {
          var ch = stream.next();
          if (ch === "$") {
            if (stream.match(variable_regex)) {
              return "variable-2";
            }
            return "variable";
          }
          if (state.continueString) {
            stream.backUp(1);
            return tokenString(stream, state);
          }
          if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
            stream.backUp(1);
            return "def";
          }
          if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch == "'" || ch == '"') {
            state.pending = ch;
            return tokenString(stream, state);
          }
          if (ch == "(" || ch == ")") {
            return "bracket";
          }
          if (ch.match(/[0-9]/)) {
            return "number";
          }
          stream.eatWhile(/[\w-]/);
          return null;
        }
        return {
          startState: function() {
            var state = {};
            state.inDefinition = false;
            state.inInclude = false;
            state.continueString = false;
            state.pending = false;
            return state;
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-cmake", "cmake");
    });
  }
});
export default require_cmake();
//# sourceMappingURL=codemirror_mode_cmake_cmake.js.map
