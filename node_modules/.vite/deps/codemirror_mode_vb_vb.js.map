{
  "version": 3,
  "sources": ["../../codemirror/mode/vb/vb.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"vb\", function(conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\n    var middleKeywords = ['else','elseif','case', 'catch', 'finally'];\n    var endKeywords = ['next','loop'];\n\n    var operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\n    var wordOperators = wordRegexp(operatorKeywords);\n\n    var commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\n    var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n\n    var indentInfo = null;\n\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords)\n                                .concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            dedent(stream,state);\n            return 'keyword';\n        }\n\n        if (stream.match(types)) {\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n                if (parserConf.singleLineStringErrors) {\n                    return ERRORCLASS;\n                } else {\n                    state.tokenize = tokenBase;\n                }\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n            if (style === 'variable') {\n                return 'variable';\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n\n        var delimiter_index = '[({'.indexOf(current);\n        if (delimiter_index !== -1) {\n            indent(stream, state );\n        }\n        if (indentInfo === 'dedent') {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n        delimiter_index = '])}'.indexOf(current);\n        if (delimiter_index !== -1) {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    var external = {\n        electricChars:\"dDpPtTfFeE \",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n\n\n            return style;\n        },\n\n        indent: function(state, textAfter) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * conf.indentUnit;\n        },\n\n        lineComment: \"'\"\n    };\n    return external;\n});\n\nCodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
