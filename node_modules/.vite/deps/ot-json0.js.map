{
  "version": 3,
  "sources": ["../../ot-json0/lib/bootstrapTransform.js", "../../ot-json0/lib/text0.js", "../../ot-json0/lib/json0.js", "../../ot-json0/lib/index.js"],
  "sourcesContent": ["// These methods let you build a transform function from a transformComponent\n// function for OT types like JSON0 in which operations are lists of components\n// and transforming them requires N^2 work. I find it kind of nasty that I need\n// this, but I'm not really sure what a better solution is. Maybe I should do\n// this automatically to types that don't have a compose function defined.\n\n// Add transform and transformX functions for an OT type which has\n// transformComponent defined.  transformComponent(destination array,\n// component, other component, side)\nmodule.exports = bootstrapTransform\nfunction bootstrapTransform(type, transformComponent, checkValidOp, append) {\n  var transformComponentX = function(left, right, destLeft, destRight) {\n    transformComponent(destLeft, left, right, 'left');\n    transformComponent(destRight, right, left, 'right');\n  };\n\n  var transformX = type.transformX = function(leftOp, rightOp) {\n    checkValidOp(leftOp);\n    checkValidOp(rightOp);\n    var newRightOp = [];\n\n    for (var i = 0; i < rightOp.length; i++) {\n      var rightComponent = rightOp[i];\n\n      // Generate newLeftOp by composing leftOp by rightComponent\n      var newLeftOp = [];\n      var k = 0;\n      while (k < leftOp.length) {\n        var nextC = [];\n        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);\n        k++;\n\n        if (nextC.length === 1) {\n          rightComponent = nextC[0];\n        } else if (nextC.length === 0) {\n          for (var j = k; j < leftOp.length; j++) {\n            append(newLeftOp, leftOp[j]);\n          }\n          rightComponent = null;\n          break;\n        } else {\n          // Recurse.\n          var pair = transformX(leftOp.slice(k), nextC);\n          for (var l = 0; l < pair[0].length; l++) {\n            append(newLeftOp, pair[0][l]);\n          }\n          for (var r = 0; r < pair[1].length; r++) {\n            append(newRightOp, pair[1][r]);\n          }\n          rightComponent = null;\n          break;\n        }\n      }\n\n      if (rightComponent != null) {\n        append(newRightOp, rightComponent);\n      }\n      leftOp = newLeftOp;\n    }\n    return [leftOp, newRightOp];\n  };\n\n  // Transforms op with specified type ('left' or 'right') by otherOp.\n  type.transform = function(op, otherOp, type) {\n    if (!(type === 'left' || type === 'right'))\n      throw new Error(\"type must be 'left' or 'right'\");\n\n    if (otherOp.length === 0) return op;\n\n    if (op.length === 1 && otherOp.length === 1)\n      return transformComponent([], op[0], otherOp[0], type);\n\n    if (type === 'left')\n      return transformX(op, otherOp)[0];\n    else\n      return transformX(otherOp, op)[1];\n  };\n};\n", "// DEPRECATED!\n//\n// This type works, but is not exported. Its included here because the JSON0\n// embedded string operations use this library.\n\n\n// A simple text implementation\n//\n// Operations are lists of components. Each component either inserts or deletes\n// at a specified position in the document.\n//\n// Components are either:\n//  {i:'str', p:100}: Insert 'str' at position 100 in the document\n//  {d:'str', p:100}: Delete 'str' at position 100 in the document\n//\n// Components in an operation are executed sequentially, so the position of components\n// assumes previous components have already executed.\n//\n// Eg: This op:\n//   [{i:'abc', p:0}]\n// is equivalent to this op:\n//   [{i:'a', p:0}, {i:'b', p:1}, {i:'c', p:2}]\n\nvar text = module.exports = {\n  name: 'text0',\n  uri: 'http://sharejs.org/types/textv0',\n  create: function(initial) {\n    if ((initial != null) && typeof initial !== 'string') {\n      throw new Error('Initial data must be a string');\n    }\n    return initial || '';\n  }\n};\n\n/** Insert s2 into s1 at pos. */\nvar strInject = function(s1, pos, s2) {\n  return s1.slice(0, pos) + s2 + s1.slice(pos);\n};\n\n/** Check that an operation component is valid. Throws if its invalid. */\nvar checkValidComponent = function(c) {\n  if (typeof c.p !== 'number')\n    throw new Error('component missing position field');\n\n  if ((typeof c.i === 'string') === (typeof c.d === 'string'))\n    throw new Error('component needs an i or d field');\n\n  if (c.p < 0)\n    throw new Error('position cannot be negative');\n};\n\n/** Check that an operation is valid */\nvar checkValidOp = function(op) {\n  for (var i = 0; i < op.length; i++) {\n    checkValidComponent(op[i]);\n  }\n};\n\n/** Apply op to snapshot */\ntext.apply = function(snapshot, op) {\n  var deleted;\n\n  checkValidOp(op);\n  for (var i = 0; i < op.length; i++) {\n    var component = op[i];\n    if (component.i != null) {\n      snapshot = strInject(snapshot, component.p, component.i);\n    } else {\n      deleted = snapshot.slice(component.p, component.p + component.d.length);\n      if (component.d !== deleted)\n        throw new Error(\"Delete component '\" + component.d + \"' does not match deleted text '\" + deleted + \"'\");\n\n      snapshot = snapshot.slice(0, component.p) + snapshot.slice(component.p + component.d.length);\n    }\n  }\n  return snapshot;\n};\n\n/**\n * Append a component to the end of newOp. Exported for use by the random op\n * generator and the JSON0 type.\n */\nvar append = text._append = function(newOp, c) {\n  if (c.i === '' || c.d === '') return;\n\n  if (newOp.length === 0) {\n    newOp.push(c);\n  } else {\n    var last = newOp[newOp.length - 1];\n\n    if (last.i != null && c.i != null && last.p <= c.p && c.p <= last.p + last.i.length) {\n      // Compose the insert into the previous insert\n      newOp[newOp.length - 1] = {i:strInject(last.i, c.p - last.p, c.i), p:last.p};\n\n    } else if (last.d != null && c.d != null && c.p <= last.p && last.p <= c.p + c.d.length) {\n      // Compose the deletes together\n      newOp[newOp.length - 1] = {d:strInject(c.d, last.p - c.p, last.d), p:c.p};\n\n    } else {\n      newOp.push(c);\n    }\n  }\n};\n\n/** Compose op1 and op2 together */\ntext.compose = function(op1, op2) {\n  checkValidOp(op1);\n  checkValidOp(op2);\n  var newOp = op1.slice();\n  for (var i = 0; i < op2.length; i++) {\n    append(newOp, op2[i]);\n  }\n  return newOp;\n};\n\n/** Clean up an op */\ntext.normalize = function(op) {\n  var newOp = [];\n\n  // Normalize should allow ops which are a single (unwrapped) component:\n  // {i:'asdf', p:23}.\n  // There's no good way to test if something is an array:\n  // http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\n  // so this is probably the least bad solution.\n  if (op.i != null || op.p != null) op = [op];\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (c.p == null) c.p = 0;\n\n    append(newOp, c);\n  }\n\n  return newOp;\n};\n\n// This helper method transforms a position by an op component.\n//\n// If c is an insert, insertAfter specifies whether the transform\n// is pushed after the insert (true) or before it (false).\n//\n// insertAfter is optional for deletes.\nvar transformPosition = function(pos, c, insertAfter) {\n  // This will get collapsed into a giant ternary by uglify.\n  if (c.i != null) {\n    if (c.p < pos || (c.p === pos && insertAfter)) {\n      return pos + c.i.length;\n    } else {\n      return pos;\n    }\n  } else {\n    // I think this could also be written as: Math.min(c.p, Math.min(c.p -\n    // otherC.p, otherC.d.length)) but I think its harder to read that way, and\n    // it compiles using ternary operators anyway so its no slower written like\n    // this.\n    if (pos <= c.p) {\n      return pos;\n    } else if (pos <= c.p + c.d.length) {\n      return c.p;\n    } else {\n      return pos - c.d.length;\n    }\n  }\n};\n\n// Helper method to transform a cursor position as a result of an op.\n//\n// Like transformPosition above, if c is an insert, insertAfter specifies\n// whether the cursor position is pushed after an insert (true) or before it\n// (false).\ntext.transformCursor = function(position, op, side) {\n  var insertAfter = side === 'right';\n  for (var i = 0; i < op.length; i++) {\n    position = transformPosition(position, op[i], insertAfter);\n  }\n\n  return position;\n};\n\n// Transform an op component by another op component. Asymmetric.\n// The result will be appended to destination.\n//\n// exported for use in JSON type\nvar transformComponent = text._tc = function(dest, c, otherC, side) {\n  //var cIntersect, intersectEnd, intersectStart, newC, otherIntersect, s;\n\n  checkValidComponent(c);\n  checkValidComponent(otherC);\n\n  if (c.i != null) {\n    // Insert.\n    append(dest, {i:c.i, p:transformPosition(c.p, otherC, side === 'right')});\n  } else {\n    // Delete\n    if (otherC.i != null) {\n      // Delete vs insert\n      var s = c.d;\n      if (c.p < otherC.p) {\n        append(dest, {d:s.slice(0, otherC.p - c.p), p:c.p});\n        s = s.slice(otherC.p - c.p);\n      }\n      if (s !== '')\n        append(dest, {d: s, p: c.p + otherC.i.length});\n\n    } else {\n      // Delete vs delete\n      if (c.p >= otherC.p + otherC.d.length)\n        append(dest, {d: c.d, p: c.p - otherC.d.length});\n      else if (c.p + c.d.length <= otherC.p)\n        append(dest, c);\n      else {\n        // They overlap somewhere.\n        var newC = {d: '', p: c.p};\n\n        if (c.p < otherC.p)\n          newC.d = c.d.slice(0, otherC.p - c.p);\n\n        if (c.p + c.d.length > otherC.p + otherC.d.length)\n          newC.d += c.d.slice(otherC.p + otherC.d.length - c.p);\n\n        // This is entirely optional - I'm just checking the deleted text in\n        // the two ops matches\n        var intersectStart = Math.max(c.p, otherC.p);\n        var intersectEnd = Math.min(c.p + c.d.length, otherC.p + otherC.d.length);\n        var cIntersect = c.d.slice(intersectStart - c.p, intersectEnd - c.p);\n        var otherIntersect = otherC.d.slice(intersectStart - otherC.p, intersectEnd - otherC.p);\n        if (cIntersect !== otherIntersect)\n          throw new Error('Delete ops delete different text in the same region of the document');\n\n        if (newC.d !== '') {\n          newC.p = transformPosition(newC.p, otherC);\n          append(dest, newC);\n        }\n      }\n    }\n  }\n\n  return dest;\n};\n\nvar invertComponent = function(c) {\n  return (c.i != null) ? {d:c.i, p:c.p} : {i:c.d, p:c.p};\n};\n\n// No need to use append for invert, because the components won't be able to\n// cancel one another.\ntext.invert = function(op) {\n  // Shallow copy & reverse that sucka.\n  op = op.slice().reverse();\n  for (var i = 0; i < op.length; i++) {\n    op[i] = invertComponent(op[i]);\n  }\n  return op;\n};\n\nrequire('./bootstrapTransform')(text, transformComponent, checkValidOp, append);\n", "/*\n This is the implementation of the JSON OT type.\n\n Spec is here: https://github.com/josephg/ShareJS/wiki/JSON-Operations\n\n Note: This is being made obsolete. It will soon be replaced by the JSON2 type.\n*/\n\n/**\n * UTILITY FUNCTIONS\n */\n\n/**\n * Checks if the passed object is an Array instance. Can't use Array.isArray\n * yet because its not supported on IE8.\n *\n * @param obj\n * @returns {boolean}\n */\nvar isArray = function(obj) {\n  return Object.prototype.toString.call(obj) == '[object Array]';\n};\n\n/**\n * Checks if the passed object is an Object instance.\n * No function call (fast) version\n *\n * @param obj\n * @returns {boolean}\n */\nvar isObject = function(obj) {\n  return (!!obj) && (obj.constructor === Object);\n};\n\n/**\n * Clones the passed object using JSON serialization (which is slow).\n *\n * hax, copied from test/types/json. Apparently this is still the fastest way\n * to deep clone an object, assuming we have browser support for JSON.  @see\n * http://jsperf.com/cloning-an-object/12\n */\nvar clone = function(o) {\n  return JSON.parse(JSON.stringify(o));\n};\n\n/**\n * JSON OT Type\n * @type {*}\n */\nvar json = {\n  name: 'json0',\n  uri: 'http://sharejs.org/types/JSONv0'\n};\n\n// You can register another OT type as a subtype in a JSON document using\n// the following function. This allows another type to handle certain\n// operations instead of the builtin JSON type.\nvar subtypes = {};\njson.registerSubtype = function(subtype) {\n  subtypes[subtype.name] = subtype;\n};\n\njson.create = function(data) {\n  // Null instead of undefined if you don't pass an argument.\n  return data === undefined ? null : clone(data);\n};\n\njson.invertComponent = function(c) {\n  var c_ = {p: c.p};\n\n  // handle subtype ops\n  if (c.t && subtypes[c.t]) {\n    c_.t = c.t;\n    c_.o = subtypes[c.t].invert(c.o);\n  }\n\n  if (c.si !== void 0) c_.sd = c.si;\n  if (c.sd !== void 0) c_.si = c.sd;\n  if (c.oi !== void 0) c_.od = c.oi;\n  if (c.od !== void 0) c_.oi = c.od;\n  if (c.li !== void 0) c_.ld = c.li;\n  if (c.ld !== void 0) c_.li = c.ld;\n  if (c.na !== void 0) c_.na = -c.na;\n\n  if (c.lm !== void 0) {\n    c_.lm = c.p[c.p.length-1];\n    c_.p = c.p.slice(0,c.p.length-1).concat([c.lm]);\n  }\n\n  return c_;\n};\n\njson.invert = function(op) {\n  var op_ = op.slice().reverse();\n  var iop = [];\n  for (var i = 0; i < op_.length; i++) {\n    iop.push(json.invertComponent(op_[i]));\n  }\n  return iop;\n};\n\njson.checkValidOp = function(op) {\n  for (var i = 0; i < op.length; i++) {\n    if (!isArray(op[i].p)) throw new Error('Missing path');\n  }\n};\n\njson.checkList = function(elem) {\n  if (!isArray(elem))\n    throw new Error('Referenced element not a list');\n};\n\njson.checkObj = function(elem) {\n  if (!isObject(elem)) {\n    throw new Error(\"Referenced element not an object (it was \" + JSON.stringify(elem) + \")\");\n  }\n};\n\n// helper functions to convert old string ops to and from subtype ops\nfunction convertFromText(c) {\n  c.t = 'text0';\n  var o = {p: c.p.pop()};\n  if (c.si != null) o.i = c.si;\n  if (c.sd != null) o.d = c.sd;\n  c.o = [o];\n}\n\nfunction convertToText(c) {\n  c.p.push(c.o[0].p);\n  if (c.o[0].i != null) c.si = c.o[0].i;\n  if (c.o[0].d != null) c.sd = c.o[0].d;\n  delete c.t;\n  delete c.o;\n}\n\njson.apply = function(snapshot, op) {\n  json.checkValidOp(op);\n\n  op = clone(op);\n\n  var container = {\n    data: snapshot\n  };\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n\n    // convert old string ops to use subtype for backwards compatibility\n    if (c.si != null || c.sd != null)\n      convertFromText(c);\n\n    var parent = null;\n    var parentKey = null;\n    var elem = container;\n    var key = 'data';\n\n    for (var j = 0; j < c.p.length; j++) {\n      var p = c.p[j];\n\n      parent = elem;\n      parentKey = key;\n      elem = elem[key];\n      key = p;\n\n      if (parent == null)\n        throw new Error('Path invalid');\n    }\n\n    // handle subtype ops\n    if (c.t && c.o !== void 0 && subtypes[c.t]) {\n      elem[key] = subtypes[c.t].apply(elem[key], c.o);\n\n    // Number add\n    } else if (c.na !== void 0) {\n      if (typeof elem[key] != 'number')\n        throw new Error('Referenced element not a number');\n\n      elem[key] += c.na;\n    }\n\n    // List replace\n    else if (c.li !== void 0 && c.ld !== void 0) {\n      json.checkList(elem);\n      // Should check the list element matches c.ld\n      elem[key] = c.li;\n    }\n\n    // List insert\n    else if (c.li !== void 0) {\n      json.checkList(elem);\n      elem.splice(key,0, c.li);\n    }\n\n    // List delete\n    else if (c.ld !== void 0) {\n      json.checkList(elem);\n      // Should check the list element matches c.ld here too.\n      elem.splice(key,1);\n    }\n\n    // List move\n    else if (c.lm !== void 0) {\n      json.checkList(elem);\n      if (c.lm != key) {\n        var e = elem[key];\n        // Remove it...\n        elem.splice(key,1);\n        // And insert it back.\n        elem.splice(c.lm,0,e);\n      }\n    }\n\n    // Object insert / replace\n    else if (c.oi !== void 0) {\n      json.checkObj(elem);\n\n      // Should check that elem[key] == c.od\n      elem[key] = c.oi;\n    }\n\n    // Object delete\n    else if (c.od !== void 0) {\n      json.checkObj(elem);\n\n      // Should check that elem[key] == c.od\n      delete elem[key];\n    }\n\n    else {\n      throw new Error('invalid / missing instruction in op');\n    }\n  }\n\n  return container.data;\n};\n\n// Helper to break an operation up into a bunch of small ops.\njson.shatter = function(op) {\n  var results = [];\n  for (var i = 0; i < op.length; i++) {\n    results.push([op[i]]);\n  }\n  return results;\n};\n\n// Helper for incrementally applying an operation to a snapshot. Calls yield\n// after each op component has been applied.\njson.incrementalApply = function(snapshot, op, _yield) {\n  for (var i = 0; i < op.length; i++) {\n    var smallOp = [op[i]];\n    snapshot = json.apply(snapshot, smallOp);\n    // I'd just call this yield, but thats a reserved keyword. Bah!\n    _yield(smallOp, snapshot);\n  }\n\n  return snapshot;\n};\n\n// Checks if two paths, p1 and p2 match.\nvar pathMatches = json.pathMatches = function(p1, p2, ignoreLast) {\n  if (p1.length != p2.length)\n    return false;\n\n  for (var i = 0; i < p1.length; i++) {\n    if (p1[i] !== p2[i] && (!ignoreLast || i !== p1.length - 1))\n      return false;\n  }\n\n  return true;\n};\n\njson.append = function(dest,c) {\n  c = clone(c);\n\n  if (dest.length === 0) {\n    dest.push(c);\n    return;\n  }\n\n  var last = dest[dest.length - 1];\n\n  // convert old string ops to use subtype for backwards compatibility\n  if ((c.si != null || c.sd != null) && (last.si != null || last.sd != null)) {\n    convertFromText(c);\n    convertFromText(last);\n  }\n\n  if (pathMatches(c.p, last.p)) {\n    // handle subtype ops\n    if (c.t && last.t && c.t === last.t && subtypes[c.t]) {\n      last.o = subtypes[c.t].compose(last.o, c.o);\n\n      // convert back to old string ops\n      if (c.si != null || c.sd != null) {\n        var p = c.p;\n        for (var i = 0; i < last.o.length - 1; i++) {\n          c.o = [last.o.pop()];\n          c.p = p.slice();\n          convertToText(c);\n          dest.push(c);\n        }\n\n        convertToText(last);\n      }\n    } else if (last.na != null && c.na != null) {\n      dest[dest.length - 1] = {p: last.p, na: last.na + c.na};\n    } else if (last.li !== undefined && c.li === undefined && c.ld === last.li) {\n      // insert immediately followed by delete becomes a noop.\n      if (last.ld !== undefined) {\n        // leave the delete part of the replace\n        delete last.li;\n      } else {\n        dest.pop();\n      }\n    } else if (last.od !== undefined && last.oi === undefined && c.oi !== undefined && c.od === undefined) {\n      last.oi = c.oi;\n    } else if (last.oi !== undefined && c.od !== undefined) {\n      // The last path component inserted something that the new component deletes (or replaces).\n      // Just merge them.\n      if (c.oi !== undefined) {\n        last.oi = c.oi;\n      } else if (last.od !== undefined) {\n        delete last.oi;\n      } else {\n        // An insert directly followed by a delete turns into a no-op and can be removed.\n        dest.pop();\n      }\n    } else if (c.lm !== undefined && c.p[c.p.length - 1] === c.lm) {\n      // don't do anything\n    } else {\n      dest.push(c);\n    }\n  } else {\n    // convert string ops back\n    if ((c.si != null || c.sd != null) && (last.si != null || last.sd != null)) {\n      convertToText(c);\n      convertToText(last);\n    }\n\n    dest.push(c);\n  }\n};\n\njson.compose = function(op1,op2) {\n  json.checkValidOp(op1);\n  json.checkValidOp(op2);\n\n  var newOp = clone(op1);\n\n  for (var i = 0; i < op2.length; i++) {\n    json.append(newOp,op2[i]);\n  }\n\n  return newOp;\n};\n\njson.normalize = function(op) {\n  var newOp = [];\n\n  op = isArray(op) ? op : [op];\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (c.p == null) c.p = [];\n\n    json.append(newOp,c);\n  }\n\n  return newOp;\n};\n\n// Returns the common length of the paths of ops a and b\njson.commonLengthForOps = function(a, b) {\n  var alen = a.p.length;\n  var blen = b.p.length;\n  if (a.na != null || a.t)\n    alen++;\n\n  if (b.na != null || b.t)\n    blen++;\n\n  if (alen === 0) return -1;\n  if (blen === 0) return null;\n\n  alen--;\n  blen--;\n\n  for (var i = 0; i < alen; i++) {\n    var p = a.p[i];\n    if (i >= blen || p !== b.p[i])\n      return null;\n  }\n\n  return alen;\n};\n\n// Returns true if an op can affect the given path\njson.canOpAffectPath = function(op, path) {\n  return json.commonLengthForOps({p:path}, op) != null;\n};\n\n// transform c so it applies to a document with otherC applied.\njson.transformComponent = function(dest, c, otherC, type) {\n  c = clone(c);\n\n  var common = json.commonLengthForOps(otherC, c);\n  var common2 = json.commonLengthForOps(c, otherC);\n  var cplength = c.p.length;\n  var otherCplength = otherC.p.length;\n\n  if (c.na != null || c.t)\n    cplength++;\n\n  if (otherC.na != null || otherC.t)\n    otherCplength++;\n\n  // if c is deleting something, and that thing is changed by otherC, we need to\n  // update c to reflect that change for invertibility.\n  if (common2 != null && otherCplength > cplength && c.p[common2] == otherC.p[common2]) {\n    if (c.ld !== void 0) {\n      var oc = clone(otherC);\n      oc.p = oc.p.slice(cplength);\n      c.ld = json.apply(clone(c.ld),[oc]);\n    } else if (c.od !== void 0) {\n      var oc = clone(otherC);\n      oc.p = oc.p.slice(cplength);\n      c.od = json.apply(clone(c.od),[oc]);\n    }\n  }\n\n  if (common != null) {\n    var commonOperand = cplength == otherCplength;\n\n    // backward compatibility for old string ops\n    var oc = otherC;\n    if ((c.si != null || c.sd != null) && (otherC.si != null || otherC.sd != null)) {\n      convertFromText(c);\n      oc = clone(otherC);\n      convertFromText(oc);\n    }\n\n    // handle subtype ops\n    if (oc.t && subtypes[oc.t]) {\n      if (c.t && c.t === oc.t) {\n        var res = subtypes[c.t].transform(c.o, oc.o, type);\n\n        // convert back to old string ops\n        if (c.si != null || c.sd != null) {\n          var p = c.p;\n          for (var i = 0; i < res.length; i++) {\n            c.o = [res[i]];\n            c.p = p.slice();\n            convertToText(c);\n            json.append(dest, c);\n          }\n        } else if (!isArray(res) || res.length > 0) {\n          c.o = res;\n          json.append(dest, c);\n        }\n\n        return dest;\n      }\n    }\n\n    // transform based on otherC\n    else if (otherC.na !== void 0) {\n      // this case is handled below\n    } else if (otherC.li !== void 0 && otherC.ld !== void 0) {\n      if (otherC.p[common] === c.p[common]) {\n        // noop\n\n        if (!commonOperand) {\n          return dest;\n        } else if (c.ld !== void 0) {\n          // we're trying to delete the same element, -> noop\n          if (c.li !== void 0 && type === 'left') {\n            // we're both replacing one element with another. only one can survive\n            c.ld = clone(otherC.li);\n          } else {\n            return dest;\n          }\n        }\n      }\n    } else if (otherC.li !== void 0) {\n      if (c.li !== void 0 && c.ld === undefined && commonOperand && c.p[common] === otherC.p[common]) {\n        // in li vs. li, left wins.\n        if (type === 'right')\n          c.p[common]++;\n      } else if (otherC.p[common] <= c.p[common]) {\n        c.p[common]++;\n      }\n\n      if (c.lm !== void 0) {\n        if (commonOperand) {\n          // otherC edits the same list we edit\n          if (otherC.p[common] <= c.lm)\n            c.lm++;\n          // changing c.from is handled above.\n        }\n      }\n    } else if (otherC.ld !== void 0) {\n      if (c.lm !== void 0) {\n        if (commonOperand) {\n          if (otherC.p[common] === c.p[common]) {\n            // they deleted the thing we're trying to move\n            return dest;\n          }\n          // otherC edits the same list we edit\n          var p = otherC.p[common];\n          var from = c.p[common];\n          var to = c.lm;\n          if (p < to || (p === to && from < to))\n            c.lm--;\n\n        }\n      }\n\n      if (otherC.p[common] < c.p[common]) {\n        c.p[common]--;\n      } else if (otherC.p[common] === c.p[common]) {\n        if (otherCplength < cplength) {\n          // we're below the deleted element, so -> noop\n          return dest;\n        } else if (c.ld !== void 0) {\n          if (c.li !== void 0) {\n            // we're replacing, they're deleting. we become an insert.\n            delete c.ld;\n          } else {\n            // we're trying to delete the same element, -> noop\n            return dest;\n          }\n        }\n      }\n\n    } else if (otherC.lm !== void 0) {\n      if (c.lm !== void 0 && cplength === otherCplength) {\n        // lm vs lm, here we go!\n        var from = c.p[common];\n        var to = c.lm;\n        var otherFrom = otherC.p[common];\n        var otherTo = otherC.lm;\n        if (otherFrom !== otherTo) {\n          // if otherFrom == otherTo, we don't need to change our op.\n\n          // where did my thing go?\n          if (from === otherFrom) {\n            // they moved it! tie break.\n            if (type === 'left') {\n              c.p[common] = otherTo;\n              if (from === to) // ugh\n                c.lm = otherTo;\n            } else {\n              return dest;\n            }\n          } else {\n            // they moved around it\n            if (from > otherFrom) c.p[common]--;\n            if (from > otherTo) c.p[common]++;\n            else if (from === otherTo) {\n              if (otherFrom > otherTo) {\n                c.p[common]++;\n                if (from === to) // ugh, again\n                  c.lm++;\n              }\n            }\n\n            // step 2: where am i going to put it?\n            if (to > otherFrom) {\n              c.lm--;\n            } else if (to === otherFrom) {\n              if (to > from)\n                c.lm--;\n            }\n            if (to > otherTo) {\n              c.lm++;\n            } else if (to === otherTo) {\n              // if we're both moving in the same direction, tie break\n              if ((otherTo > otherFrom && to > from) ||\n                  (otherTo < otherFrom && to < from)) {\n                if (type === 'right') c.lm++;\n              } else {\n                if (to > from) c.lm++;\n                else if (to === otherFrom) c.lm--;\n              }\n            }\n          }\n        }\n      } else if (c.li !== void 0 && c.ld === undefined && commonOperand) {\n        // li\n        var from = otherC.p[common];\n        var to = otherC.lm;\n        p = c.p[common];\n        if (p > from) c.p[common]--;\n        if (p > to) c.p[common]++;\n      } else {\n        // ld, ld+li, si, sd, na, oi, od, oi+od, any li on an element beneath\n        // the lm\n        //\n        // i.e. things care about where their item is after the move.\n        var from = otherC.p[common];\n        var to = otherC.lm;\n        p = c.p[common];\n        if (p === from) {\n          c.p[common] = to;\n        } else {\n          if (p > from) c.p[common]--;\n          if (p > to) c.p[common]++;\n          else if (p === to && from > to) c.p[common]++;\n        }\n      }\n    }\n    else if (otherC.oi !== void 0 && otherC.od !== void 0) {\n      if (c.p[common] === otherC.p[common]) {\n        if (c.oi !== void 0 && commonOperand) {\n          // we inserted where someone else replaced\n          if (type === 'right') {\n            // left wins\n            return dest;\n          } else {\n            // we win, make our op replace what they inserted\n            c.od = otherC.oi;\n          }\n        } else {\n          // -> noop if the other component is deleting the same object (or any parent)\n          return dest;\n        }\n      }\n    } else if (otherC.oi !== void 0) {\n      if (c.oi !== void 0 && c.p[common] === otherC.p[common]) {\n        // left wins if we try to insert at the same place\n        if (type === 'left') {\n          json.append(dest,{p: c.p, od:otherC.oi});\n        } else {\n          return dest;\n        }\n      }\n    } else if (otherC.od !== void 0) {\n      if (c.p[common] == otherC.p[common]) {\n        if (!commonOperand)\n          return dest;\n        if (c.oi !== void 0) {\n          delete c.od;\n        } else {\n          return dest;\n        }\n      }\n    }\n  }\n\n  json.append(dest,c);\n  return dest;\n};\n\nrequire('./bootstrapTransform')(json, json.transformComponent, json.checkValidOp, json.append);\n\n/**\n * Register a subtype for string operations, using the text0 type.\n */\nvar text = require('./text0');\n\njson.registerSubtype(text);\nmodule.exports = json;\n\n", "// Only the JSON type is exported, because the text type is deprecated\n// otherwise. (If you want to use it somewhere, you're welcome to pull it out\n// into a separate module that json0 can depend on).\n\nmodule.exports = {\n  type: require('./json0')\n};\n"],
  "mappings": "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",
  "names": ["type"]
}
