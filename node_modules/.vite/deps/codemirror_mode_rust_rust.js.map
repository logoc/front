{
  "version": 3,
  "sources": ["../../codemirror/mode/rust/rust.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineSimpleMode(\"rust\",{\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    electricInput: /^\\s*\\}$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  }\n});\n\n\nCodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\nCodeMirror.defineMIME(\"text/rust\", \"rust\");\n});\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,sBAAiC,gBAAkC;AAAA,eAChE,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,wBAAwB,yBAAyB,GAAG,GAAG;AAAA;AAE/D,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,iBAAiB,QAAO;AAAA,QACjC,OAAO;AAAA,UAEL,EAAC,OAAO,OAAO,OAAO,UAAU,MAAM,SAAQ;AAAA,UAE9C,EAAC,OAAO,QAAQ,OAAO,UAAU,MAAM,aAAY;AAAA,UACnD,EAAC,OAAO,UAAU,OAAO,UAAU,MAAM,kBAAiB;AAAA,UAE1D,EAAC,OAAO,iEAAiE,OAAO,WAAU;AAAA,UAE1F,EAAC,OAAO,8CAA8C,OAAO,WAAU;AAAA,UAEvE;AAAA,YAAC,OAAO;AAAA,YACP,OAAO;AAAA,UAAQ;AAAA,UAChB,EAAC,OAAO,+EAA+E,OAAO,CAAC,WAAW,MAAM,KAAK,EAAC;AAAA,UACtH,EAAC,OAAO,uSAAuS,OAAO,UAAS;AAAA,UAC/T,EAAC,OAAO,2FAA2F,OAAO,OAAM;AAAA,UAChH,EAAC,OAAO,uCAAuC,OAAO,UAAS;AAAA,UAC/D;AAAA,YAAC,OAAO;AAAA,YACP,OAAO,CAAC,WAAW,MAAM,KAAK;AAAA,UAAC;AAAA,UAChC,EAAC,OAAO,aAAa,OAAO,OAAM;AAAA,UAClC,EAAC,OAAO,UAAU,OAAO,UAAS;AAAA,UAClC,EAAC,OAAO,QAAQ,OAAO,WAAW,MAAM,UAAS;AAAA,UACjD,EAAC,OAAO,gBAAgB,OAAO,WAAU;AAAA,UACzC,EAAC,OAAO,iBAAgB,OAAO,aAAY;AAAA,UAC3C,EAAC,OAAO,gBAAgB,OAAO,WAAU;AAAA,UACzC,EAAC,OAAO,YAAY,QAAQ,KAAI;AAAA,UAChC,EAAC,OAAO,YAAY,QAAQ,KAAI;AAAA,QAClC;AAAA,QACA,QAAQ;AAAA,UACN,EAAC,OAAO,KAAK,OAAO,UAAU,MAAM,QAAO;AAAA,UAC3C,EAAC,OAAO,yBAAyB,OAAO,SAAQ;AAAA,QAClD;AAAA,QACA,YAAY;AAAA,UACV,EAAC,OAAO,KAAK,OAAO,UAAU,MAAM,QAAO;AAAA,UAC3C,EAAC,OAAO,SAAS,OAAO,SAAQ;AAAA,QAClC;AAAA,QACA,iBAAiB;AAAA,UACf,EAAC,OAAO,OAAO,OAAO,UAAU,MAAM,QAAO;AAAA,UAC7C,EAAC,OAAO,oBAAoB,OAAO,SAAQ;AAAA,QAC7C;AAAA,QACA,SAAS;AAAA,UACP,EAAC,OAAO,WAAW,OAAO,WAAW,MAAM,QAAO;AAAA,UAClD,EAAC,OAAO,MAAM,OAAO,UAAS;AAAA,QAChC;AAAA,QACA,MAAM;AAAA,UACJ,kBAAkB,CAAC,SAAS;AAAA,UAC5B,eAAe;AAAA,UACf,mBAAmB;AAAA,UACnB,iBAAiB;AAAA,UACjB,aAAa;AAAA,UACb,MAAM;AAAA,QACR;AAAA,MACF,CAAC;AAGD,MAAAA,YAAW,WAAW,kBAAkB,MAAM;AAC9C,MAAAA,YAAW,WAAW,aAAa,MAAM;AAAA,IACzC,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
