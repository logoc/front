{
  "version": 3,
  "sources": ["../../codemirror/mode/cmake/cmake.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod);\n  else\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"cmake\", function () {\n  var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  function tokenize(stream, state) {\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        return 'variable-2';\n      }\n      return 'variable';\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Do we just have a function on our hands?\n    // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    if (ch == '(' || ch == ')') {\n      return 'bracket';\n    }\n    if (ch.match(/[0-9]/)) {\n      return 'number';\n    }\n    stream.eatWhile(/[\\w-]/);\n    return null;\n  }\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n\n});\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAGA,KAAC,SAAS,KAAK;AACb,UAAI,OAAO,WAAW,YAAY,OAAO,UAAU;AACjD,YAAI,oBAA+B;AAAA,eAC5B,OAAO,UAAU,cAAc,OAAO;AAC7C,eAAO,CAAC,sBAAsB,GAAG,GAAG;AAAA;AAEpC,YAAI,UAAU;AAAA,IAClB,GAAG,SAASA,aAAY;AACxB;AAEA,MAAAA,YAAW,WAAW,SAAS,WAAY;AACzC,YAAI,iBAAiB;AAErB,iBAAS,YAAY,QAAQ,OAAO;AAClC,cAAI,SAAS,MAAM,YAAY;AAC/B,iBAAO,CAAC,OAAO,IAAI,MAAM,UAAU,OAAO,KAAK,MAAM,MAAM,SAAS;AAClE,gBAAI,YAAY,OAAO,QAAQ,QAAQ,MAAM,WAAW,KAAK;AAC3D,0BAAY;AACZ;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AACA,cAAI,WAAW;AACb,mBAAO,OAAO,CAAC;AAAA,UACjB;AACA,cAAI,WAAW,MAAM,SAAS;AAC5B,kBAAM,iBAAiB;AAAA,UACzB,OAAO;AACL,kBAAM,iBAAiB;AAAA,UACzB;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,SAAS,QAAQ,OAAO;AAC/B,cAAI,KAAK,OAAO,KAAK;AAGrB,cAAI,OAAO,KAAK;AACd,gBAAI,OAAO,MAAM,cAAc,GAAG;AAChC,qBAAO;AAAA,YACT;AACA,mBAAO;AAAA,UACT;AAEA,cAAI,MAAM,gBAAgB;AAExB,mBAAO,OAAO,CAAC;AACf,mBAAO,YAAY,QAAQ,KAAK;AAAA,UAClC;AAGA,cAAI,OAAO,MAAM,aAAa,KAAK,OAAO,MAAM,eAAe,GAAG;AAChE,mBAAO,OAAO,CAAC;AACf,mBAAO;AAAA,UACT;AACA,cAAI,MAAM,KAAK;AACb,mBAAO,UAAU;AACjB,mBAAO;AAAA,UACT;AAEA,cAAI,MAAM,OAAO,MAAM,KAAK;AAE1B,kBAAM,UAAU;AAEhB,mBAAO,YAAY,QAAQ,KAAK;AAAA,UAClC;AACA,cAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,mBAAO;AAAA,UACT;AACA,cAAI,GAAG,MAAM,OAAO,GAAG;AACrB,mBAAO;AAAA,UACT;AACA,iBAAO,SAAS,OAAO;AACvB,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,UACL,YAAY,WAAY;AACtB,gBAAI,QAAQ,CAAC;AACb,kBAAM,eAAe;AACrB,kBAAM,YAAY;AAClB,kBAAM,iBAAiB;AACvB,kBAAM,UAAU;AAChB,mBAAO;AAAA,UACT;AAAA,UACA,OAAO,SAAU,QAAQ,OAAO;AAC9B,gBAAI,OAAO,SAAS;AAAG,qBAAO;AAC9B,mBAAO,SAAS,QAAQ,KAAK;AAAA,UAC/B;AAAA,QACF;AAAA,MACF,CAAC;AAED,MAAAA,YAAW,WAAW,gBAAgB,OAAO;AAAA,IAE7C,CAAC;AAAA;AAAA;",
  "names": ["CodeMirror"]
}
