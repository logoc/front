{
  "version": 3,
  "sources": ["../../codemirror/mode/pascal/pascal.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"],
  "mappings": "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",
  "names": ["CodeMirror", "words"]
}
